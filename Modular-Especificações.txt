Especificação dos módulos:

-Módulo Lista:Tem que instanciar todas as listas que vão ser usadas no jogo.Armazena conteúdos de tipo variável (não apenas listas de char).Só quando for testar no script que é pra usar char.

-Módulo para testar a lista:Tipo TestLis.Coordena a execução dos testes com o script.

-Módulo Tabuleiro:Matriz de 8x8.Cada casa da matriz armazena as informações da peça que está naquela casa.Essas informações são: o id da peça(composta pelo nome e cor da peça),a lista de peças que estão ameaçando a peça em questão e a lista de peças que estão sendo ameaçadas pela peça em questão.
As cores são V(Vazio),P(Preto),B(Branco).
Deve ser possível criar novas peças com movimentos customizados.

-Módulo para interpretar o script do Tabuleiro:Tem que fazer um módulo de teste para interpretar uma linguagem de script criada por nós(como o TestLis fazia no trabalho 1).


O script gerado no fim do trabalho 2 ainda não simula uma partida.Também não cria nós nas listas.As listas devem ser criadas e permanecerem vazias durante toda a execução desse trabalho.



Especificação das funções:

Módulo Lista:
-Criar Lista:Cria a cabeça de uma lista identificada por idLista.Retorna um ponteiro para a lista criada.

-Obter ID Lista:Retorna o valor do idLista contido na sua cabeça.Essa função não compara esse ID com o passado pelo script.Essa comparação é feita no modulo de testar a lista(TestLis).

-Inserir Nó:Insere na lista um novo nó após o nó corrente.Caso esteja vazia insere o primeiro elemento.

-ObterNó: Obtêm o valor contido no nó corrente e o retorna.O teste para comparar se esse valor é igual ao passado no script será feito no TestLis.

-ExcluirNóCorrente:Exclui o nó corrente da lista.Caso esteja vazia, não faz nada e retorna erro.

-IrProx: Muda o ponteiro do corrente para o próximo elemento da lista.Caso não tenha próximo elemento não faz nada.

-IrAnt: Muda o ponteiro do corrente para o elemento anterior da lista.Caso não tenha elemento anterior não faz nada.

-Alterar Nó Corrente:Altera o conteúdo do nó corrente para o valor recebido pela função.Se a lista estiver vazia retorna um erro.

-Destrói Lista:Destrói a cabeça da lista e todos os nós existentes nela.Todos os espaços devem ser desalocados com free.



Módulo para testar a lista:

-Teste da criar Lista:Recebe do script Inx(posição que a lista vai ser armazenada no vetor),idLista(identificador da lista, nesse caso uma string) e uma condRet. Tem que testar se a string passada pelo script respeita os padrões(tem até 4 caracteres).Deve armazenar o ponteiro recebido pela função de criar lista   em um vetor auxiliar na posição que for passada pelo script(inx).É por meio desse vetor que deve ser controlado se as listas existem ou não.Os retornos possíveis são 0 caso tenha criado com sucesso ou 6 se faltou memória.

-Teste da Obter ID Lista:Recebe um Inx e o ID Lista do script.Esse teste deve chamar a Obter Id Lista e comparar se o IDLista retorna para aquele inx é igual ao passado pelo script.Condições de retorno não especificadas.Pode colocar 0 se for o mesmo e 1 caso não seja.

-Teste da Inserir Nó:Recebe do script um Inx,um char e uma CondRet.Sempre que receber um char tem que testar se tem no máximo 4 caracteres.Retorna 0 se inseriu OK ou 6 caso tenha faltado memória.

-Teste da ObterNó:Recebe do script Inx, uma string e uma CondRet.Chama a função e compara o valor retornado pela função com o passado pelo script.Esse teste será feito no modulo de testes por uma questão de manter o padrão.Retorna 0 se obteve corretamente ou 2 caso a lista esteja vazia.

-Teste ExcluirNoCorrente:Recebe do script Inx. Chama a função e pode retornar 0 se exclui corretamente ou 2 se a lista estiver vazia.Esses retornos não estão explícitos no trabalho mas serão feitos dessa forma para manter o padrão.

-Teste IrProx:Recebe do script um Inx e uma CondRet. Chama a função e pode retornar 0 caso a movimentação tenha sido bem sucedida,2 caso a lista esteja vazia ou 4 caso o nó corrente seja o ultimo e não tenha próximo para ir.  

-Teste IrAnt:Recebe do script um Inx e uma CondRet.Chama a função e pode retornar 0 caso a movimentação tenha dado certo,2 caso a lista esteja vazia ou 5 caso o nó corrente seja o primeiro e não tenha elemento anterior para ir.

-Teste Alterar Nó Corrente:Recebe do script um Inx,uma string para ser colocado no conteúdo do nó corrente e uma CondRet. Deve testar para ver se a string atende aos padrões(menos de 4 caracteres).Pode retornar 0 caso a alteração tenha sido bem sucedida,2 caso a lista esteja vazia ou 3 caso a lista não exista no vetor.Essa verificação da lista existir ou não no vetor será feita aqui no módulo de testes(não explicito no texto).

-Teste Destrói Lista:Recebe do script um Inx e uma CondRet.Chama a função e pode retornar 0 se a exclusão foi OK ou 3 se a Lista não existe.Novamente o texto não explicita onde testar se a lista existe ou não.Será feito no módulo de testes.


Módulo Tabuleiro:

-InserirPeça:Recebe a coordenada linha-coluna onde a peça deve ser inserida e o Id da Peça a ser inserida(composto pelo nome e cor da peça).Pode retornar 0 se inseriu OK ou 1 se a coordenada não existe.(condições de retorno não explicitadas no trabalho).Tem que se preocupar também com o que essa inserção muda nas listas referentes a cada peça no tabuleiro.

-MoverPeça:Recebe a coordenada de origem e a de destino.Deve verificar se a peça que está naquela coordenada pode executar aquele movimento.Se não puder retornar erro.Se puder fazê-lo e verificar se vai capturar uma peça na coordenada de destino.Se capturar chamar a função Retirar Peça para elimina-la do tabuleiro.Essa função também tem que dar um update nas listas referentes as peças.

-Retirar Peça:Recebe a coordenada da casa que contem a peça a ser retirada.Retorna 0 se teve sucesso.Tem que dar update nas listas de cada peça envolvida nessa retirada.Retorna erro caso não tenha peça naquela casa ou caso a coordenada não exista na matriz.

-Obter Peça:Recebe a coordenada linha-coluna e devolve o Id da Peça(composto por cor e nome).Se não tiver nenhuma peça naquela casa pode retornar um erro.Pode ser usada em praticamente todas as outras funções.

-ObterListaAmeaçantes:Recebe a coordenada linha coluna e retorna  a lista que contem todas as peças que essa peça está ameaçando(retorna o ponteiro para a cabeça da lista).

-ObterListaAmeaçados:Recebe a coordenada linha coluna e retorna a lista que contem todas a peças que estão sendo ameaçadas pela peça em questão.Retorna 0 se deu certo.Para que essa função(e a anterior também) dêm certo é importante manter essas listas sempre atualizadas(pior parte do módulo).

-DestruirTabuleiro:Destroi o conteudo de cada casa do tabuleiro e o proprio tabuleiro.Tem que dar free em cada casa e no tabuleiro completo.

-Módulo Teste Tabuleiro:
Aqui o script de teste tem que ser feito por inteiro(ele não nos dá a linguagem do script,nós temos que criar) e baseada nessa linguagem tem que ser feito os testes.
